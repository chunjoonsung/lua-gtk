
CMS Administration tool
=======================

  This is a tool that is designed to manage a CMS driven website.  It provides
a GUI to manipulate certain aspects of the website that would otherwise be less
convenient to handle.

  In the current, first release it only interfaces to a Drupal based website,
and only manages images: resizing, uploading, publishing in various languages
with separate titles and descriptions.  You can look at existing galleries
with thumbnails and full size.

  In the future, more modules might be written; either to interface with other
CMS and/or to manage other areas, like stories, blogs etc.

  It consists of a server side Drupal module and a client written in Lua.
The GUI is realized using Gtk2 and the Lua-Gtk2 binding.  All these parts are
fairly platform independent and currently work on Linux as well as on Windows.

Written by Wolfgang Oertl in February 2007, updated in October 2007.



Drupal Setup
============

  In order to have multiple languages, please install the i18n module
(internationalization) and translation module, which are available from
drupal.org,

  This uploader tool has no album management built in at the moment.  Let the
image module create its default vocabulary; the language setting of the
vocabulary itself is of no importance.

  Create the albums separately for each language.  Most likely you will want
the same name in all languages, but the description can vary.  Only the albums
of the current language will appear on the "image galleries" page.

  The images also have a language attached.  In order not to get confused, keep
only images of a language only in albums with the same language.  This is what
this tool attempts to do.

Settings for the translation module (administer/settings/translation):

 - language management: interface language depends on content
 - link to node translations: teaser and main page
 - translation workflow: enabled

Settings for i18n module (administer/settings/i18n):

 - browser language detection: enabled
 - content selection mode: only current language and no language

Settings for Image type (administer/settings/content types/image)

 - multilingual support: enabled

Connect multiple terms in different languages together:

  admin/taxonomy/nnn/translation

To honour this for image galleries, a patch is required to the translation
block.





Image Insertion
===============

To add a new image, you have to do the following:

 - Start the application.  Login, retrieval of the album list, and soon also
   the language list, happens automatically in the background.

 - Using the file browser, select an image.  You can look at the preview
   to decide which one.  Double click on the image.

 - While the resizing and upload of the image is in progress, you can already
   enter title and description for the languages of your site.

 - Select the Album where the images should appear.  Note that each language
   has a separate set of albums; these can be linked together, though, so that
   selecting the album for one language automatically sets the others.

 - click on the "Publish" button, and you're done!


What happens in the background:

 - Upload the file via a HTTP request.  This happens as soon as the image
   is selected, while the user enters the description.  The image is scaled
   to the desired size before uploading using the Gdk-Pixbuf.  The server
   module then moves it from the PHP upload directory to the Drupal temporary
   directory, possibly giving it a new name.  This new name is returned to the
   client.

 - When all titles, descriptions and galleries are specified, these are sent
   to the server with a single HTTP request.  Following things happen then:

   - The uploaded file is detected, and moved from the Drupal temporary
     directory to the image directory, giving it the original name.  If the
     file already exists, some number is appended to make a new name.

   - The first image node is created with node_save().

   - _image_build_derivatives() is called.  It creates a thumbnail and a 
     preview (unless the original is quite small), and stores those in
     the image temporary directory, e.g. images/temp/.

   - _image_insert() is called for each size.  This usually happens in the
     image_insert() hook, but for some reasons I have disabled this on my
     site.  Anyway, doing this manually works always (hope so).  This moves
     the files again, this time to the final destination, e.g. images/,
     and inserts the corresponding entries in files and file_revisions.

   - An appropriate tuple is generated in i18n_node.

   - For each other language, another node is created.  The entries in
     the tables files and file_versions are copied, and the tuple in i18n_node
     is created.



Protocol
========

  The requests to the server are done with GET parameters, even though POST
parameters would achieve the same.  Multiple logical requests can be made with
one HTTP request.  The GET parameters are as follows:

	r[1][cmd]	command of the first request
	r[1][..]	additional fields depending on the command
	r[2][cmd]	command of the second request
	etc.

The number of requests is automatically determined; the numbering must start
with 1 and be contiguous.

  For a file upload via HTTP, the standard form encoding is used.  The content
of the "name" field of the file must be "edit[fileNN]", where NN is the request
number.  Multiple files for one subrequest is currently not supported.

  The response is line based, that means, the client can read it linewise and
possibly use the response even before it is completely retrieved.

Each result line starts with a request number.  Usually the requests are
handled in order, and the responses are also in order, but this is not
a requirement.

nr VAR name value
	set a result variable.  Multiple such lines may be present for a
	given request.  For single values, this is much easier than the LUA
	block (see below).

nr INFO message
	Some information, may repeat.  This can be shown to the user, but
	otherwise has no meaning.  Can be helpful for debugging.

nr DATA length name
	now follow "length" bytes of binary data, tagged with the given name.
	after this data, normal line based reading resumes.

nr LUA length name
	after this, "length" bytes of LUA data follow which can be evaluated
	to yield some data.  This should be stored as "name" in the client.

nr OK message
	The request has been completed sucessfully.  No more information
	is to be sent for this request number.

nr ERR message
	The request had an error.  End of request response.

