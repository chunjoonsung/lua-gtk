
BUGS
====

- CRITICAL: stack overflow and endless loop when clicking close or
  backward button in examples/toolbar.lua.

- g_convert & friends on win32 don't work.  some library component missing?

- GtkTextTag sometimes freed with refcount 1, and later tagbuffer frees
  it again.  some override is required!

- GSList.  you have to call g_slist_free() yourself.  what about the
  items pointed to?  

- review all the code for improvements and maybe some bugs

- GdkAtom represented in the function list with one level of indirection too
  many?  Like, GdkAtom* should be GdkAtom etc.  This is because GdkAtom is
  defined to be a pointer to the opaque _GdkAtom structure.

- check refcounting usage, memory leaks
	- valgrind
	- glib memory statistics
	- make sure my reference counting (g_object_ref/_unref) is correct.
	  seems to be ok...
	- refcounting on GIOChannel not OK.  Sometimes in-use channels are
	  freed, which aborts communication. (probably already fixed)
	- GObject documentation on memory management says that when an object
	  is destroyed, the "dispose" handler should release all references
	  it might hold, while finalize really frees the object.  Does this
	  apply to lua-gtk?  Usually GObjects will have just one ref from
	  Lua, while the Lua proxy object may have multiple references.

- running Win executables with wine under Linux, and using glade.lua - font
  sizes are insanely large.



MISSING FEATURES
================

- in lua2ffi_vararg(struct argconv_t *ar), support TABLE input as
  array of pointers to strings.

- gtk_stock_list_ids returns GSList; the individual strings in it must
  be freed with g_free, but this doesn't happen automatically, and there's
  no way to do it manually either.

- GSList: can't access the "gpointer data" structure element.  The application
  needs to know what it is supposed to point to.  A typecast function is
  needed, e.g. like this.

  	gtk.cast(list, "data", "GtkTextTag")
		simple to implement

	list.data:cast("GtkTextTag")
		requires a void* in a structure to be returned as userdata
		with a metatable with a "cast" function.


- socket_co: connect attempts must be asynchronous, otherwise the GUI can be
  blocked (by a slow DNS server, for example).
	getaddrinfo_a in libc.  available in mingw?
		libws2_32.a has _getaddrinfo@16, but not getaddrinfo_w.
  	libc-ares1
	adns -- quite "fat" according to udns description
	write an own non-recursing simple dns resolver?  might be easy.
	http://www.network-research.org/udns.html
	udns


- wrapper for gtk_tree_model_get would be nice.

- add more #defines from the Gtk includes to the ENUM list automatically.
	gdk/gdkselection.h

- more documentation
	- improve the homepage, add more content, better layout
	- use luadoc tags for all user visible functions in the C modules
	- developer documentation to give pointers for hacking

- call tracing should show the actual values of the arguments; would require
  a new callback for each parameter type, some kind of tostring.

- try LuaJIT - should speed everything up.  at least check that it works with
  it because in a larger project, somebody might want to use it.

- GCC attributes.  Use when GCC is available.

http://gcc.gnu.org/onlinedocs/gcc-4.1.1/gcc/Function-Attributes.html



IMPROVEMENTS
============

- support another hashing method of cmph: bdz.  Lookup seems a bit more
  code, though.
  there are _ph variants, which are perfect hashes, but not minimal, i.e.
  there are gaps in the resulting hash values, which causes unused buckets
  and therefore space wastage.
  
  for bdz_ph and the function list, 5710 keys map to 7139 buckets, wasting
  1429 buckets, which (at 2 bytes per bucket) means 2858 wasted bytes.
  for this size, the hash data is (on disk) 1826 bytes.

  the same with bdz, the data size is 2059, only slightly more, but now
  no buckets are wasted.  some additional code is required though.

  compare that to fch: much longer generation time, but data size is 4468
  bytes.

	- improve hash-fch-generate.c to also support bdz
	- write hash-bdz.c to support lookup with the bdz algorithm.


- use a better module definition, see
  http://lua-users.org/wiki/LuaDesignPatterns

- Additional Library Support.  If available at compile time and enabled,
  compile it in.  If not available at runtime, disable this part of the API.

  Done: Cairo, GLib, GObject, ATK, Pango, gdk-pixbuf, GDK, GTK+

  - cairo - http://cairographics.org/
  	partly working, not tested much

  - GL
  	libgtkgl2.0-dev
	libgtkglext1-dev

  - GDA
  	libgda3-dev

  - GConf2
  	libgconf2-dev
	liborbit2-dev

  - GD2
  	libgd2-xpm-dev
	libfreetype6-dev
	libpng12-dev
	libjpeg62-dev

  - GAIL
  	libgail-dev

  - GtkHTML
  	libgtkhtml2-dev

  - Gnome Libraries
  	libgnome2-dev
  	libgnomedb3-dev
	libgnomeprint2.2-dev
	libart-2.0-dev

  - xml2
  	libxml2-dev

  - libxslt
	libxslt1-dev

  - libglade - maybe not, use GtkBuilder




