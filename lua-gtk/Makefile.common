
# -- general configuration --
CFLAGS	+=-g -Wall `pkg-config --cflags gtk+-2.0 lua5.1` -I ${ODIR} -I src
HASHF	:=hsieh
HASH	:=hash-$(HASHF)
LD	:=${MINGW}ld
# -fPIC required for position indendent code in shared objects; besides,
#  shrinks the library size somewhat.
CC	:=${MINGW}gcc -Wall -fPIC
HOSTCC	:=gcc -Wall
VERSION	:=0.6
# -- end general configuration --

.PHONY:	tags wc tar install mrproper clean tests config_h doc
.PRECIOUS: ${ODIR}gtkdata.%.txt ${ODIR}gtkdata.%.c ${ODIR}%.keys

ifeq ($(LINK), 1)
LIBS	:=${GTKLIB}
else
CFLAGS	+=-DMANUAL_LINKING
endif

# -- is cmph available? --
ifeq ($(CMPHDIR),)
HASHOBJ	:= ${ODIR}hash-simple.o ${ODIR}${HASH}.o \
	${ODIR}_funclist.o ${ODIR}_enumlist.o
else
HASHOBJ	:= ${ODIR}hash-fch.o ${ODIR}_funclist_fch.o ${ODIR}_enumlist_fch.o
endif


gtk2dll: config_h ${ODIR}${ODLL}

dirs:
	@mkdir -p ${ODIR}

# Create the config.h file

config_h:
	@echo "#define HASHFUNC hash_${HASHF}" > ${ODIR}config.h.tmp
	@echo -e "#ifndef ${PLATFORM}\n #define ${PLATFORM}\n#endif" >> ${ODIR}config.h.tmp
	@if diff -q ${ODIR}config.h ${ODIR}config.h.tmp 2> /dev/null; then rm -f ${ODIR}config.h.tmp; else mv -f ${ODIR}config.h.tmp ${ODIR}config.h; fi

# rule to build the library.

${ODIR}${ODLL}: $(addprefix ${ODIR}, types.o gtk2.o interface.o data.o \
	call.o callback.o channel.o gvalue.o \
	debug.o widget.o gtkdata.structs.o _override.o) \
	$(HASHOBJ)
	@echo $@
	@${CC} -shared -o $@ $^ ${LIBFFI} ${LUALIB} ${LIBS}

${ODIR}debug.o: src/debug.c
	@echo $@
	@${CC} ${CFLAGS} -I lua-5.1/src -c -o $@ $<

${ODIR}_funclist.c: ${ODIR}gtkdata.funcs.txt ${ODIR}generate src/luagtk_hash.h
	@echo $@
	@${ODIR}generate -s 4096 -o $@ -n hash_info_funcs -d -f $<

${ODIR}_enumlist.c: ${ODIR}gtkdata.enums.txt ${ODIR}generate src/luagtk_hash.h
	@echo $@
	@${ODIR}generate -s 1201 -o $@ -n hash_info_enums -d -f $<

${ODIR}_override.c: ${ODIR}override.luac ${ODIR}file2c
	@echo $@
	@${ODIR}file2c override < $< > $@
	
${ODIR}gtkdata.%.txt ${ODIR}gtkdata.%.c ${ODIR}gtkdata.%.h: ${ODIR}types.xml src/extra_enum.txt script/parse-xml.lua
	@echo "Generating Gtk Data..."
	@script/parse-xml.lua "${ODIR}" $<
	@cat src/extra_enum.txt >> ${ODIR}gtkdata.enums.txt

${ODIR}types.xml: script/make-xml.lua
	@echo "Generating types.xml..."
	@script/make-xml.lua "$@"

${ODIR}%.o: ${ODIR}%.c
	@echo $@
	@${CC} ${CFLAGS} -c -o $@ $<

# -- ffi magic --

${ODIR}luagtk_ffi.h: ${ODIR}ffi-types
	@echo $@
	@${ODIR}ffi-types > $@

${ODIR}ffi-types: src/ffi-types.c
	@echo $@
	@${HOSTCC} -o $@ $< $(LIBFFI)

# -- fch hash --

${ODIR}%.keys: ${ODIR}%.txt
	@echo $@
	@sed 's/,.*$$//' < $^ > $@

# -c gives the effort expended to finding a minimal hash function. lower
#  value = more effort. 2.0 is about the minimum.
${ODIR}%.mph: ${ODIR}%.keys
	@echo $@
	@$(CMPHBIN) -a fch -c 2.0 -m $@ -g $^

${ODIR}_funclist_fch.c: ${ODIR}hash-fch-generate ${ODIR}gtkdata.funcs.mph
	@echo $@
	@${ODIR}hash-fch-generate ${ODIR}gtkdata.funcs.mph \
		${ODIR}gtkdata.funcs.txt "funcs" > $@

${ODIR}_enumlist_fch.c: ${ODIR}hash-fch-generate ${ODIR}gtkdata.enums.mph
	@echo $@
	@${ODIR}hash-fch-generate ${ODIR}gtkdata.enums.mph \
		${ODIR}gtkdata.enums.txt "enums" > $@

# -- helper programs for fch hash, to be compiled with HOSTCC --

${ODIR}generate.o: src/generate.c
	@echo $@
	@${HOSTCC} ${CFLAGS} -c -o $@ $<

${ODIR}generate: ${ODIR}generate.o ${ODIR}${HASH}-native.o
	@echo $@
	@${HOSTCC} -o $@ $^

${ODIR}file2c: src/file2c.c
	@echo $@
	@${HOSTCC} -o $@ $^

${ODIR}hash-fch-generate: ${ODIR}hash-fch-generate.o
	@echo $@
	@${HOSTCC} -g -o $@ $^ $(CMPHLIB)

${ODIR}hash-fch-generate.o: src/hash-fch-generate.c
	@echo $@
	@${HOSTCC} -g -o $@ -I ${CMPHDIR} -c $< 


# -- general rules --

${ODIR}%-native.o: src/%.c
	@echo $@
	@${HOSTCC} ${CFLAGS} -c -o $@ $<

${ODIR}%.o: src/%.c
	@echo $@
	@${CC} ${CFLAGS} -c -o $@ $<

${ODIR}%.s: src/%.c
	@echo $@
	@${CC} ${CFLAGS} -S -o $@ $<

${ODIR}%.luac: src/%.lua
	@echo $@
	@luac -s -o $@ $<

# -- special targets --

clean:
	rm -f ${ODIR}${ODLL} ${ODIR}generate ${ODIR}_*.c ${ODIR}*.o
	rm -f ${ODIR}file2c ${ODIR}override.luac ${ODIR}hash-fch-generate
	rm -f ${ODIR}ffi-types

mrproper: clean
	rm -f ${ODIR}gtkdata.* ${ODIR}hash-fch-* ${ODIR}config.h \
		${ODIR}types.xml
install: all
	# you need to be root for this!
	mkdir -p $(INDIR1)
	cp ${ODIR}${ODLL} $(INDIR1)
	mkdir -p $(INDIR2)/gtk
	cp -a lib $(INDIR2)/gtk/

tar:
	(cd ..; ln -s lua-gtk lua-gtk-${VERSION}; \
	tar czvf lua-gtk-${VERSION}.tar.gz \
		--exclude build --exclude CVS --exclude mingw/gtk \
		--exclude tags --exclude ".*.swp" lua-gtk-${VERSION}; \
	rm lua-gtk-${VERSION})

wc:
	wc src/*.{c,h,lua} script/*.lua

tags:
	ctags src/*.[ch]

tests:
	tests/run-tests.sh

diff:
	cvs diff | diffstat

doc:
	luadoc -d luadoc lib

# -- dependencies --

${ODIR}gtk2.o: src/luagtk.h src/link.h
${ODIR}data.o: src/luagtk.h src/link.h
${ODIR}interface.o: src/luagtk.h src/link.h
${ODIR}call.o: src/luagtk.h src/link.c src/link.h ${ODIR}luagtk_ffi.h
${ODIR}callback.o: src/luagtk.h src/link.c src/link.h
${ODIR}channel.o: src/luagtk.h src/link.c src/link.h
${ODIR}widget.o: src/luagtk.h src/link.h
${ODIR}debug.o: src/luagtk.h src/link.h
${ODIR}gvalue.o: src/luagtk.h src/link.h
${ODIR}types.o: ${ODIR}gtkdata.types.c src/luagtk.h src/link.h ${ODIR}luagtk_ffi.h
${ODIR}hash-fch-generate.o: src/hash-fch.h
${ODIR}hash-fch.o: src/hash-jenkins.c


