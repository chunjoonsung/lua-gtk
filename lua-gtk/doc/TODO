

BUGS
====

- current build status

	sparc: builds; all tests fail; gtk.window_new not found.
	powerpc: builds; all tests fail; gtk.window_new not found
	i386: builds; test #11 fails
	hppa: builds; all tests fail; gtk.window_new not found
	s390: builds; all testse fail; gtk.window_new not found;
		gtk.GTK_CAN_DEFAULT not found
	mipsel: liblua5.1-bit0 not found


- GtkCurve's first element is GtkPixmap* -- but should be GtkPixmap, no?

- regressions
	dump_struct: show what a struct* is if it is not NULL

- overrides don't do the trace output, which happens in luagtk_call.
  How to do this??  This should happen automatically and not require some
  boilerplate code for each override.  There are C and Lua overrides, about
  30 in total.
  Problem: the override is called without its name being accesible, right?
  So the function would have to call ``show trace("my name")''

  GdkColor...

- Next problem.  Arrays?  This is currently ignored.  It should add another
  level of indirection, and possibly set a max. number of elements.  Basically
  arrays could be nested, does this happen?
  
- Next problem.  substructures and subunions are currently ignored.  Must
  be supported e.g. for GdkEvent.  This has worked before?

  The elements can be accessed, though, e.g.
  dump_struct(gdkevent.grab_broken).  So, in reality, the data is all there.
  Just drop the warning messages?

- The size field for structure elements should not be set if the referenced
  type has this info.  Must be present for bitfields, but max. value should
  be 32 (or 64 on 64 bit archs).

  Interestingly, sometimes the size is set for fundamental types (like struct,
  union) when this type has no fixed size.  This size should be zero!


- maybe check the "const" flag sometimes at runtime for something?  disallow
  writing into such structures.

- g_convert & friends on win32 don't work.  some library component missing?

- GtkTextTag sometimes freed with refcount 1, and later tagbuffer frees
  it again.  some override is required!

- GSList.  you have to call g_slist_free() yourself.  what about the
  items pointed to?  

- review all the code for improvements and maybe some bugs

- GdkAtom represented in the function list with one level of indirection too
  many?  Like, GdkAtom* should be GdkAtom etc.  This is because GdkAtom is
  defined to be a pointer to the opaque _GdkAtom structure.

- check refcounting usage, memory leaks
	- valgrind
	- glib memory statistics
	- make sure my reference counting (g_object_ref/_unref) is correct.
	  seems to be ok...
	- refcounting on GIOChannel not OK.  Sometimes in-use channels are
	  freed, which aborts communication. (probably already fixed)
	- GObject documentation on memory management says that when an object
	  is destroyed, the "dispose" handler should release all references
	  it might hold, while finalize really frees the object.  Does this
	  apply to lua-gtk?  Usually GObjects will have just one ref from
	  Lua, while the Lua proxy object may have multiple references.

- running Win executables with wine under Linux, and using glade.lua - font
  sizes are insanely large.



MISSING FEATURES
================

- in lua2ffi_vararg(struct argconv_t *ar), support TABLE input as
  array of pointers to strings.

- socket_co: connect attempts must be asynchronous, otherwise the GUI can be
  blocked (by a slow DNS server, for example).
	getaddrinfo_a in libc.  available in mingw?
		libws2_32.a has _getaddrinfo@16, but not getaddrinfo_w.
  	libc-ares1
	adns -- quite "fat" according to udns description
	write an own non-recursing simple dns resolver?  might be easy.
	http://www.network-research.org/udns.html
	udns


- wrapper for gtk_tree_model_get would be nice.

- add more #defines from the Gtk includes to the ENUM list automatically.
	gdk/gdkselection.h

- more documentation
	- user documentation must be written by hand, the luadoc output
	  is cute but not really helpful.
	- set up a wiki to edit documentation?
	- improve the homepage, add more content, better layout
	- use luadoc tags for all user visible functions in the C modules
	- developer documentation to give pointers for hacking

- call tracing should show the actual values of the arguments; would require
  a new callback for each parameter type, some kind of tostring.

- try LuaJIT - should speed everything up.  at least check that it works with
  it because in a larger project, somebody might want to use it.



IMPROVEMENTS
============

- Cache the result of the lookup in luagtk_type_modify.  Allocate (type_count)
  number of short integers to store the offsets into the sorted string table.

- Current data sizes:

Structure		curr	-html	old
---------------------------------------------
type_list		13592	11616	5976
elem_list		23784	19160	19064
type_strings_types	21019	17372	32349 for all strings
type_strings_elem	21876	18610	
type_strings_proto	2035	1840
_funcs_fch.g		2320	
_funcs_data		21793	20412	32881
_funcs_index		24191	22847	34269
_enums_fch.g		1902	
_enums_data		18567	14417	14417
_enums_index		19359	14599	21897
override_data		2689	2689	2987
ffi_type_map		416	408	408
----------------------------------------------
		TOTALS	173543
		SIZE		251845	265093


_*_fch.g requires _*_fch.b * sizeof(short) bytes, I reckon.

  - Add a debug function that shows these numbers

  - Try to reduce
  	1. hash data - bdz method needs less space.  not much to be gained

	2. more efficient encoding of enum data?

	3. in production, enum data could be used without hash values; saves
	   about 10k, or just one byte of hash value, saves 5k

	4. More efficient encoding of function prototypes?  try different
	   variants. Current version:

	   	0	invalid
		1-127	this type
		>128	unset high bit, shift right 8 + add next byte

		one byte encoding enough 17500/23100 times = 76%
		total = 17500 + 5600*2 = 28700

		0	invalid (required for something? maybe not)
		1-249	this type
		250	next byte + 250
		251	next byte + 250 + 256
		252	next byte + 250 + 256*2
		253	next byte + 250 + 256*3
		254	next byte + 250 + 256*4
		255	two bytes follow for full range

		one byte enough 19580 times = 85%
		total = 19580 + 3520 = 26620 bytes

		The three byte version is required for > 1530 types, which
		is currently not reached.

		Not much to be gained.

	5. try to combine strings.
		long_some_thing
		some_thing
		thing
		GtkMenu
		GtkMenuBar
		GtkMenuBarButton

	6. remove the func_nnnn dummy type names and element names.  Use just
	   "func" or so for all of them.

	

- support another hashing method of cmph: bdz.  Lookup seems a bit more
  code, though.
  there are _ph variants, which are perfect hashes, but not minimal, i.e.
  there are gaps in the resulting hash values, which causes unused buckets
  and therefore space wastage.
  
  for bdz_ph and the function list, 5710 keys map to 7139 buckets, wasting
  1429 buckets, which (at 2 bytes per bucket) means 2858 wasted bytes.
  for this size, the hash data is (on disk) 1826 bytes.

  the same with bdz, the data size is 2059, only slightly more, but now
  no buckets are wasted.  some additional code is required though.

  compare that to fch: much longer generation time, but data size is 4468
  bytes.

	- improve hash-fch-generate.c to also support bdz
	- write hash-bdz.c to support lookup with the bdz algorithm.


- use a better module definition, see
  http://lua-users.org/wiki/LuaDesignPatterns

- Additional Library Support.  If available at compile time and enabled,
  compile it in.  If not available at runtime, disable this part of the API.

  Done: Cairo, GLib, GObject, ATK, Pango, gdk-pixbuf, GDK, GTK+, GtkHTML

  - cairo - http://cairographics.org/
  	partly working, not tested much

  - GL
  	libgtkgl2.0-dev
	libgtkglext1-dev

  - GDA
  	libgda3-dev

  - GConf2
  	libgconf2-dev
	liborbit2-dev

  - GD2
  	libgd2-xpm-dev
	libfreetype6-dev
	libpng12-dev
	libjpeg62-dev

  - GAIL
  	libgail-dev

  - Gnome Libraries
  	libgnome2-dev
  	libgnomedb3-dev
	libgnomeprint2.2-dev
	libart-2.0-dev

  - xml2
  	libxml2-dev

  - libxslt
	libxslt1-dev

  - libglade - maybe not, use GtkBuilder

- GCC attributes.  Use when GCC is available.

http://gcc.gnu.org/onlinedocs/gcc-4.1.1/gcc/Function-Attributes.html




