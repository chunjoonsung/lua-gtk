
# Common Makefile rules to build a library module.  Following variables need
# to be set before including this file:
#
# MODULE
# Name of the module.  Source is in src/$(MODULE), and the build directory
# (with configure-generated config files) is in build/$(ARCH)/$(MODULE).
#
# SRC
# (optional) list of module specific source files in addition to init.c and the
# files generated from the headers (types, functions etc.)
#

ifeq ($(MODULE), )
 $(error You have to define $$MODULE)
endif

all: module_$(MODULE) dummy

dummy:
	@true

# Read state file if exists.  Don't use :=, because then the new state (if
# changed) wouldn't be used in the submake invocation.  May be overridden on
# the command line.
FILE := $(wildcard build/make.state)
ifneq ($(FILE), )
    include $(FILE)
endif

ifeq ($(wildcard build/$(ARCH)/$(MODULE)/config.make), )
    $(error Library $(ARCH)/$(MODULE) not yet configured)
endif

# $(warning Building $(ARCH) $(MODULE)...)

# include the config file
include build/$(ARCH)/$(MODULE)/config.make

# -- general configuration --
#HASH	:=hash-$(HASHF)
O	:=o
LIBINSTALL := cp
LIBFINAL := touch
IDIR	:=src/$(MODULE)
DYNLINK_PREFIX :=$(MODULE)
BINDIR	=build/$(ARCH)/
DEVMOD	:=build/$(ARCH)/gnomedev.so
# -- end general configuration --

# -- non-core-module settings --
ifeq ($(COREMODULE), )
SRC	:=init generated module $(SRC)
OFILES	=$(SRC) types globals fundamentals

#$(DEVMOD):
#	$(error Build the gnome module first)

else
OFILES	=$(SRC)
endif

# Run make with "H=" as an argument to show all build commands; otherwise
# just show each build target.
H	:=@
ifeq ($(H), @)
 I	=@echo $@
else
 I	:=
endif

# how to recursively call make (if required)
submake = $(MAKE) -r --no-print-directory


module_$(MODULE): $(ODIR)$(MODULE)$(DLLEXT)

# cleanup
clean:
	$H rm -f $(addprefix $(ODIR),$(addsuffix .$O,$(OFILES)) $(CLEAN)) \
		$(ODIR)$(MODULE)$(DLLEXT) \
		$(ODIR)constants* $(ODIR)functions* $(ODIR)link.[ch] \
		$(ODIR)types.* $(ODIR)fundamentals.* \
		$(ODIR)types.xml $(ODIR)globals.c $(ODIR)generated.c \
		$(ODIR)parse-xml.log

mrproper: clean
	$H rm -f $(ODIR)config.{h,lua,make}

size: $(addprefix $(ODIR), $(addsuffix .$O,$(OFILES)))
	$H size -t $(addprefix $(ODIR), $(addsuffix .$O,$(OFILES)))
	$H size $(ODIR)$(MODULE)$(DLLEXT)

wc:
	$H wc $(IDIR)/*.[ch]

.PHONY:	tags wc tar install mrproper clean tests config_h doc size
.PRECIOUS: $(ODIR)%.txt $(ODIR)%.c

# headers for dependencies
DEP	:=include/common.h include/module.h $(ODIR)config.h

ifeq ($(DYNLINK), 0)
LIBS	+=$(GTK_LIBS)
else
OFILES	+=link
DEP	+=$(ODIR)link.h
endif

# configure hash files depending on the setting in build/make.state.
ifeq ($(COREMODULE), )
 OFILES +=functions constants
else
 ifeq ($(HAVE_CMPH), 1)
  OFILES	+=hash-functions hash-cmph hash-$(HASH_METHOD)
 else
  OFILES	+=hash-simple # hash-$(HASH_METHOD) $(HASH)
 endif
endif

# the target library
$(ODIR)$(MODULE)$(DLLEXT): $(addprefix $(ODIR),$(addsuffix .$O,$(OFILES)))
	$I
	$H $(CC) $(LDFLAGS) -shared -o $@ $^ $(LIBS)

# if config.h changes, chances are that make-xml must be run again.
${ODIR}types.xml: script/make-xml.lua $(ODIR)config.h $(ODIR)config.lua $(IDIR)/spec.lua
	$I
	$H script/make-xml.lua "$(ODIR)"

# changed spec.lua - must reconfigure.  This may or may not change config.lua,
# but to avoid configures every time, the timestamp is updated.
$(ODIR)config.lua: $(IDIR)/spec.lua
	$I
	$H script/configure.lua $(CONFIG_ARGS) $(MODULE)
	$H touch "$@"

$(ODIR)%.$O: $(ODIR)%.c
	$I
	$H ${CC} ${CFLAGS} -c -o $@ $<

$(ODIR)%.$O: $(IDIR)/%.c $(DEP)
	$I
	$H $(CC) $(CFLAGS) -c -o $@ $<

# module.c is code required by modules to hook up with the core module and
# must therefore be compiled into each module.
$(ODIR)module.$O: include/module.c $(DEP)
	$I
	$H $(CC) $(CFLAGS) -c -o $@ $<


# - Dependencies for modules -
$(ODIR)init.$O: $(IDIR)/init.c
$(ODIR)constants.$O: include/lg-hash.h
$(ODIR)functions.$O: include/lg-hash.h
$(ODIR)types.$O: include/common.h $(ODIR)config.h


# -- dynamic runtime linking --
linkh: ${ODIR}link.h
${ODIR}link.c ${ODIR}link.h: $(IDIR)/spec.lua script/make-link.lua \
	${ODIR}types.xml
	$I
	$H script/make-link.lua ${ODIR}types.xml $(IDIR)/spec.lua \
		${ODIR}link.h ${ODIR}link.c $(DYNLINK_PREFIX)_dynlink

# Generation of data from the XML file

$(ODIR)functions.txt $(ODIR)constants.txt $(ODIR)types.c \
	$(ODIR)globals.c $(ODIR)fundamentals.c $(ODIR)generated.c: \
	${ODIR}types.xml script/parse-xml.lua include/fundamental.lua \
	$(ODIR)config.lua $(DEVMOD) $(IDIR)/spec.lua
	$I
	$H script/parse-xml.lua "${ODIR}" "$<" "$(ODIR)config.lua"

ifeq ($(COREMODULE), )
endif

# Update the timestamp of parse-xml.lua whenever one of its parts changes.
# This in turn forces rebuilding its output.
script/parse-xml.lua: script/xml-types.lua script/xml-parser.lua \
	script/xml-output.lua script/xml-const.lua
	touch $@

# XXX unused
#${ODIR}_override.c: ${ODIR}override.luac ${ODIR}file2c
#	$I
#	$H ${ODIR}file2c override < $< > $@
#

# -- hash generation --

$(ODIR)%.c: $(ODIR)%.txt $(DEVMOD)
	$I
	$H lua -lgnomedev -e 'gnomedev.generate_hash("$<", "$*", "$@")'

# -- general rules --

${ODIR}%.$O: $(IDIR)/%.c
	$I
	$H ${CC} ${CFLAGS} -c -o $@ $<

$(ODIR)%.$O: $(ODIR)%.c
	$I
	$H $(CC) $(CFLAGS) -c -o $@ $<

${ODIR}%.s: $(IDIR)/%.c
	$I
	$H ${CC} ${CFLAGS} -S -o $@ $<

${ODIR}%.c: $(IDIR)/%.c
	$I
	$H ${CC} ${CFLAGS} -E -o $@ $<

# could use -s to remove debugging info
${ODIR}%.luac: $(IDIR)/%.lua
	$I
	$H luac -o $@ $<

