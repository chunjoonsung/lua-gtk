#! /bin/sh
# vim:sw=4:sts=4

# Setup script for lua-gtk
# by Wolfgang Oertl 2008
# tested with bash, dash, ksh, mksh, pdksh, posh.


# - default settings -
VERSION="0.8"
ARCH=
DEBUG=
SUMMARY=1
DEBUGFUNCS=1
HASHF=hsieh

# only works if cwd is correct
cd $(pwd)	# workaround for posh
cd $(dirname $0)

known_architectures () {
    S="Known architectures:"
    for file in script/config.*; do
	S="$S ${file#script/config.}"
    done
    echo "$S."
}

show_help () {
    echo "Usage: $0 [args] [architecture]"
    echo "Configure lua-gtk for compilation."
    echo ""
    echo "  --debug          Compile with debugging information (-g)"
    echo "  --no-summary     Don't show configure results"
    echo "  --disable-debug  Omit debugging functions like dump_struct"
    echo "  --host [ARCH]    Cross compile to another architecture, see below"
    echo ""
    known_architectures
    echo "If no architecture is given, a default is determined."
}

# - parse command line -
while test "$1"; do

    case "$1" in
	--debug) DEBUG=1 ;;
	--summary) SUMMARY=1 ;;
	--no-summary) SUMMARY= ;;
	--disable-debug) DEBUGFUNCS= ;;
	--enable-debug) DEBUGFUNCS=1 ;;

	--host)
	    if test "$ARCH"; then
		echo "$0: unexpected option $1"
		echo "Try \`$0 --help' for more information."
		exit 1
	   fi
	   ARCH=$2
	   shift
	   ;;

	--help)
	    show_help
	    exit 1
	    ;;

	*)
	    echo "$0: unrecognized option $1"
	    echo "Try \`$0 --help' for more information."
	    exit 1
	    ;;
    esac

    shift

done

# without architecture, determine default
if test ! "$ARCH"; then

    if which dpkg-architecture > /dev/null; then
	eval $(dpkg-architecture)
	ARCH=$DEB_BUILD_ARCH_OS-$DEB_BUILD_ARCH_CPU
    fi
fi


# check for valid architecture

if test ! "$ARCH"; then
    show_help
    exit 1
fi

# Split into OS and CPU parts.  CPU part must be given.
ARCH_OS=${ARCH%-*}
ARCH_CPU=${ARCH#*-}
if test "$ARCH_CPU" = "$ARCH"; then
    echo "Please specify the CPU part of the architecture, e.g. $ARCH_OS-i386."
    exit 1
fi

# Check for valid CPU.  This is the list of Debian supported CPUs.
case "$ARCH_CPU" in
    alpha|amd64|arml|armel|hppa|i386|ia64|m68k) ;;
    mips|mipsel|powerpc|s390|sparc) ;;
    *) echo "Unknown CPU $ARCH_CPU.  Add to configure script if desired.";
	exit 1;
esac


# Either a OS/CPU specific config file is available, or just OS specific.
CONFIG_SCRIPT="script/config.$ARCH"
if test ! -r "$CONFIG_SCRIPT"; then
    if test ! "$ARCH_CPU"; then
	echo "Unknown architecture $ARCH; script/config.$ARCH not available."
	exit 1
    fi
    CONFIG_SCRIPT="script/config.$ARCH_OS"
    if test ! -r "$CONFIG_SCRIPT"; then
	echo "Unknown architecture $ARCH; neither script/config.$ARCH nor"
	echo "script/config.$ARCH_OS are available."
	exit 1
    fi
fi

# - general setup -

ODIR=build/$ARCH
CFG_H_REAL=$ODIR/config.h
CFG_M_REAL=$ODIR/config.make

ERR=0
CFG_H=$CFG_H_REAL.tmp
CFG_M=$CFG_M_REAL.tmp

# - pkg-config -
if which pkg-config > /dev/null; then
    PC=pkg-config
else
    echo "pkg-config not installed - required for setup."
    exit 1
fi


test -d build || mkdir build
test -d $ODIR || mkdir $ODIR
echo -n > $CFG_H
echo -n > $CFG_M

echo "ARCH        :=$ARCH" >> $CFG_M
echo "VERSION     :=$VERSION" >> $CFG_M
echo "ODIR        :=$ODIR/" >> $CFG_M
echo "CFLAGS      =" >> $CFG_M

# extra Makefile?
FNAME=script/Makefile.$ARCH_OS
test -r $FNAME && echo "include $FNAME" >> $CFG_M

FNAME=script/Makefile.$ARCH
test -r $FNAME && echo "include $FNAME" >> $CFG_M

# - Gtk -

if $PC --exists gtk+-2.0; then
    GTK_CFLAGS=$($PC --cflags gtk+-2.0)
    GTK_VERSION=$($PC --modversion gtk+-2.0)
    echo "CFLAGS      +=$GTK_CFLAGS" >> $CFG_M
else
    echo "Gtk 2.0 with development headers not installed."
    ERR=1
fi


# - Lua -

if $PC --exists lua5.1; then
    LUA_CFLAGS=$($PC --cflags lua5.1)
    LUA_VERSION=$($PC --modversion lua5.1)
    echo "CFLAGS      +=$LUA_CFLAGS" >> $CFG_M
else
    echo "Lua 5.1 not installed."
    ERR=1
fi

# - cmph -
# architecture independet; it is required for build, not for runtime.

if $PC --exists cmph; then
    HAVE_CMPH=1
    echo "HAVE_CMPH   :=1" >> $CFG_M
    CMPH_CFLAGS="$($PC --cflags cmph)"
    CMPH_VERSION=$($PC --modversion cmph)
    echo "CMPH_CFLAGS :=$CMPH_CFLAGS" >> $CFG_M
    echo "CMPH_BIN    :=cmph" >> $CFG_M
    echo "CMPH_LIBS   :=$($PC --libs cmph)" >> $CFG_M
else
    CMPH_VERSION="not available"
fi

# C compiler
if which gcc > /dev/null; then
    HOSTCC=gcc
    CC=gcc
else
    echo "GCC not found."
    ERR=1
fi

# - architecture specific config -

. $CONFIG_SCRIPT

# get versions of c compiler
if test "$HOSTCC"; then
    HOSTCC_VERSION=`$HOSTCC --version | head -1`
fi

if test "$CC" -a "$CC" != "$HOSTCC"; then
    CC_VERSION=`$CC --version | head -1`
fi

# common makefile settings from above
echo "CC          :=$CC" >> $CFG_M
echo "HOSTCC      :=$HOSTCC" >> $CFG_M
echo "LINK        :=$LINK" >> $CFG_M
echo "GTK_LIBS    :=$GTK_LIBS" >> $CFG_M
echo "LIBFFI      :=$LIBFFI" >> $CFG_M

if test $LINK -eq 0; then
    echo "#define MANUAL_LINKING" >> $CFG_H
fi


# - general configuration -

echo "CFLAGS      +=-Wall -I $ODIR -I src" >> $CFG_M
echo "HASHF       :=$HASHF" >> $CFG_M
echo "HASH        :=hash-\$(HASHF)" >> $CFG_M

if test "$DEBUG"; then
    echo "CFLAGS      +=-g" >> $CFG_M
    echo "LDFLAGS     +=-g" >> $CFG_M
    DEBUG_INFO="on"
else
    echo "CFLAGS      +=-Os -fomit-frame-pointer" >> $CFG_M
    DEBUG_INFO="off"
fi


# - output config.h -

echo "#define LUAGTK_VERSION \"$VERSION\"" >> $CFG_H
echo "#define LUAGTK_${ARCH_OS}_$ARCH_CPU" >> $CFG_H
echo "#define LUAGTK_$ARCH_OS" >> $CFG_H
echo "#define LUAGTK_ARCH_OS \"$ARCH_OS\"" >> $CFG_H
echo "#define LUAGTK_ARCH_CPU \"$ARCH_CPU\"" >> $CFG_H
echo "#define HASHFUNC hash_$HASHF" >> $CFG_H
if test "$DEBUGFUNCS"; then
    echo "#define LUAGTK_DEBUG_FUNCS" >> $CFG_H
    DEBUG_FUNCS_INFO="enabled"
else
    DEBUG_FUNCS_INFO="disabled"
fi


# - check for errors -

if test $ERR -gt 0; then
    echo "Errors during configuration."
    rm -f $CFG_H $CFG_M
    exit 1
fi


# Replace real config files with new ones if they have changed.  This preserves
# the timestamp and avoids complete rebuilds after reconfiguration.
if test -f $CFG_H_REAL; then
    if diff -q $CFG_H_REAL $CFG_H > /dev/null; then
	rm $CFG_H
    fi
fi

if test -f $CFG_H; then
    mv -f $CFG_H $CFG_H_REAL
fi

# no need to check for differences here.
mv -f $CFG_M $CFG_M_REAL

# set the default architecture for make.
echo $ARCH > build/make.state

if test "$SUMMARY"; then
    echo ""
    echo "lua-gtk configured successfully.  Settings:"
    echo ""
    echo "   Version:              $VERSION"
    echo "   Build architecture:   $ARCH"
    echo "   C compiler:           $HOSTCC_VERSION"
    if test "$CC_VERSION"; then
    echo "   Cross compiler:       $CC_VERSION"
    fi
    echo "   Lua version:          $LUA_VERSION"
    echo "   Gtk version:          $GTK_VERSION"
    echo "   libffi:               $LIBFFI"
    echo "   Cmph library:         $CMPH_VERSION"
    echo "   Debugging symbols:    $DEBUG_INFO"
    echo "   Debugging functions:  $DEBUG_FUNCS_INFO"
    echo ""
    echo "Type make to build."
    echo ""
fi

# - success -
exit 0

